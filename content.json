{"meta":{"title":"Egdon's Blog","subtitle":null,"description":"Egdon's Blog","author":"Egdon","url":"http://egdondeblog.xyz","root":"/"},"pages":[{"title":"","date":"2021-08-08T07:27:46.105Z","updated":"2021-08-08T07:27:46.105Z","comments":true,"path":"404.html","permalink":"http://egdondeblog.xyz/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2021-08-11T13:13:14.647Z","updated":"2021-08-11T13:13:14.647Z","comments":true,"path":"about/index.html","permalink":"http://egdondeblog.xyz/about/index.html","excerpt":"","text":"Egdon 本科ME在读,新手入门"},{"title":"","date":"2021-09-05T08:26:23.742Z","updated":"2021-09-05T08:26:23.742Z","comments":false,"path":"artitalk/index.html","permalink":"http://egdondeblog.xyz/artitalk/index.html","excerpt":"","text":"加载失败请点击:哔哔叨叨网页说说公用账号密码: Account:visitor Password:visitor"},{"title":"所有标签","date":"2021-08-08T10:51:05.081Z","updated":"2021-08-08T10:51:05.081Z","comments":true,"path":"categories/index.html","permalink":"http://egdondeblog.xyz/categories/index.html","excerpt":"","text":""},{"title":"小伙伴们","date":"2021-08-14T11:12:43.274Z","updated":"2021-08-14T11:12:43.274Z","comments":true,"path":"friends/index.html","permalink":"http://egdondeblog.xyz/friends/index.html","excerpt":"","text":""},{"title":"<font size=6 face=\"Consolas\" color=#F7A97B> Egdon的歌单 </font>","date":"2021-08-08T13:12:08.000Z","updated":"2021-08-13T12:12:38.204Z","comments":true,"path":"music/index.html","permalink":"http://egdondeblog.xyz/music/index.html","excerpt":"","text":"网易云"},{"title":"","date":"2021-08-08T04:53:46.139Z","updated":"2021-08-08T04:53:46.139Z","comments":true,"path":"mylist/index.html","permalink":"http://egdondeblog.xyz/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-08-08T04:57:13.612Z","updated":"2021-08-08T04:57:13.612Z","comments":true,"path":"tags/index.html","permalink":"http://egdondeblog.xyz/tags/index.html","excerpt":"","text":""},{"title":"这里有些好康的🤹‍♀️","date":"2021-08-10T12:40:45.000Z","updated":"2021-09-05T08:25:38.577Z","comments":true,"path":"fun/index.html","permalink":"http://egdondeblog.xyz/fun/index.html","excerpt":"","text":"这里有些好康的🤹‍♀️ Egdon的歌单 Egdon的影单 Egdon的书单 哔哔叨叨"},{"title":"好康的？是新游戏哦？🤷‍♂️","date":"2021-08-13T08:54:30.000Z","updated":"2021-09-05T08:26:06.184Z","comments":true,"path":"game-list/index.html","permalink":"http://egdondeblog.xyz/game-list/index.html","excerpt":"","text":"Mikutap 解压有趣的音游 ​ 2.3D元素周期表 挺炫酷的,就挂上来了 看了你就记住了吗 3.3D魔方 魔方转转转 4.3D飞机小游戏 还不错,建议横屏游玩 5.合成大西瓜 不解释,点一点,玩一天 8.13 版本更新： 点击宝箱可以随意切换水果,但会影响游戏性"}],"posts":[{"title":"I2C通信原理初探以及MSP432代码实现","slug":"I2C通信原理初探","date":"2021-08-12T13:51:19.000Z","updated":"2021-08-15T14:09:28.573Z","comments":true,"path":"2021/08/12/I2C通信原理初探/","link":"","permalink":"http://egdondeblog.xyz/2021/08/12/I2C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%88%9D%E6%8E%A2/","excerpt":"","text":"I2C通信原理初探以及MSP432代码实现​ 之前有用过MPU6050的软件I2C,什么DMP自检不通过,零偏校准偏移,甚至还会因为杜邦线太长自检失败。种种玄学问题导致我长期以来对I2C有一种抵触心理UART YYDS 。但只靠UART一种通信方式注定活不长久(指电赛),所以趁着电赛延期好好把I2C通信捋一捋。 ​ 对于I2C的使用，通常来说有两种实现方法，一种是利用单片机自带的硬件实现I2C，另外一个就是根据I2C协议和GPIO的输出，来实现软件I2C。其实想要用好I2C很简单，只需要上CSDN上扒一些代码移植移植就完事了。但是要是想真正用好I2C，个人认为理论基础也必须要过关，所以上代码之前，我们先来过一遍I2C的原理。 硬件原理硬件的电气连接： （以下部分借用了网络图片，如有侵权请与我联系） ​ I2C通信中，主机SDA端与从机SDA端相连，主机SCL端与从机SCL端相连，且必须共地，这样就完成了我们的电气连接。在I2C总线空闲时，SDA和SCL应该处于高电平，我们上百度一搜索就能发现参考电路有一个上拉电阻。但是不是意味着我们也要接一个上拉电阻呢，个人认为未必。因为接上拉电阻的前提是单片机的GPIO输出是开漏输出，但是对于MSP432来说，似乎根本没有在STM32中开漏输出和推挽输出的概念（至少我查手册是查不到的），因此我们连这个输出是不是开漏输出都搞不清楚，直接接上一个上拉电阻恐怕并非良策。所以直接在输出低电平的时候使用单片机的输出模式输出低电平，输出高电平的时候使用单片机的输入上拉模式让总线处于高电平。 我们看到电气连接图中有时钟信号线，这意味着I2C通信是一个同步通信，有无时钟信号线是同步通信与异步通信的最主要的区别。 为了理解时钟线在信息传输中的作用，我举一个比较简单的例子：假设你是主机，我是从机，你的手上有一面红旗，我们编码：举起红旗代表1，放下红旗代表0，我们两个的位置相距很远无法交谈以至于你要用红旗来给我传输信息，那么，当你要给我传输信息”1111”时你会怎么做呢？有的人会说，那就连续举起四次红旗啊。但其实这样的想法是错误的，因为”举起”的动作前提必然是”放下”，如果你连续举起了四次红旗，在我看来，你是”举起-放下-举起-放下-举起-放下-举起”，按照编码规则，我认为你传输的信息应该是”1010101”，这样一来信息的传递就出现了误差。你一看，欸，多了三个零，那你一直举着红旗不就行了？这样一来你给我发送的信息必定只有1而没有0。但问题又来了，你一直举着红旗，我怎么知道你要给我传输的数据是”1111111”（7个1）还是”11”（2个1）还是其他位数的”11111…”呢？在你发出同样信息的前提下，我对你发出的信息的采样起始时间，采样频率决定了我接收到的信息是什么样的。 那如何确定信息采样的起始时间和采样频率，才能让我接收到的信息恰恰就是你想表达的信息呢？这里有两个解决方案： 方案1： 我和你都去买一块10块钱的电子手表，我们两个手表的时间都是一样地转动，我和你约定，在你作出某一个特定动作（随便什么都行）的一瞬间，我和你同时开始掐表计时，约定每隔5秒就对信息进行一次采样。那如果你要给我传输的第一个信息是0，你就在第一个5秒前放下红旗，到了第一个5秒的时刻，我一看，发现你是放下红旗，那么我就记录下一个0；如果你要给我传输的第二个信息是1，那就在第二个5秒前举起红旗，我一看，就能记录下一个1，以此类推。这里要注意的是，既然以及约定好了采样的时间点，那么在两个相邻时间点之间，我是没有必要看你做了什么动作的（可能是因为我比较懒x），你在这段时间可以干任何事情（比如说放松下手臂），只要在我采样的时间点你能够给我你想要给的信息就行。换句话说，信息只在某一个特定的时间点才进行传输，而不允许在相邻两个时间点之间进行传输，就算你心血来潮想要在这段时间内多传输几个比特的信息，也没有用，因为我根本不会看（就算看了我也不知道你是在休息还是在传递信息）。 方案2： 你去买多一面蓝旗，我们约定，当你举起蓝旗的瞬间，我就去看一下你拿红旗的手是举起还是放下，从而记录下1或0，这样也能够接收到准确的信息。 如果以前对单片机的几种通信比较了解，那么你一定能够看出，刚刚所描述的第一种通信方式就是异步通信，第二种通信方式就是同步通信。 就我个人理解，异步通信和同步通信都需要时钟，只不过异步通信的时钟是同时存在于主机和从机的”北京时间”，而同步通信的时钟是由主机单方面控制的”红绿灯”。 好，有了同步和异步通信的概念，我们就能够通过约定一系列的通信规则，来准确传输信息，这也就是我们所说的通信协议。I2C通信就是一种同步通信，而研究现有的同步通信的通信协议，是绝对少不了”时序图”这一概念的，所以在开始学习I2C协议前，我们先来了解一下两个时序图： 1.方波时序图 这样的时序图代表着信号线的电平在0和1之间反复横跳，按这种规律变化的信号线常常被人们用来传输时钟信号（类似于前面举起蓝旗又放下的例子）。由于实际器件是无法做到瞬时改变电压值的，所以在跳变沿的地方有时也会是一个斜线而不是一条垂直线。 2.Either or (非此即彼)信号时序图 可以看到，第二条信号的时序图有很多交叉，在同一时间点电平又上又下的，令人迷惑。但其实它的意思是，在”又上又下”的地方，你可以置高电平，或者也可以置低电平（不存在又高又低的电平，这里不是量子力学），而这个电平就代表着你想传输出去的信息。 好，理解了这两个基本的时序图，我们就足以阅读I2C的时序图了。 首先我们来看信号的起始与终止的时序图： ​ 观察时序图可以发现以下规律： 信号的起始：SCL高电平时，SDA产生一个下降沿 信号的终止：SCL高电平时，SDA产生一个上升沿 另外要记得，在I2C通讯的大部分过程中，SDA和SCL线的控制权都在主机手上（后面会提到从机控制的情况）。 接下来，我们看看数据是如何同步传输的： ​ SDA线置为高电平代表1，置为低电平代表0，在从机进行数据采样之前，SCL被置于低电位，而在采样时，SCL线拉高，此时SDA线就不允许切换电平了，它处在什么电平就决定了从机读到的数据是0还是1。而当SCL线被拉回低电位的时候，SDA线既可以切换电平，也可以保持不变，为下一比特信息的传输作准备。 ​ 最后再来看数据传输的字节格式： ​ 对于I2C通信而言，可以无限制地传输字节，但是每一个字节的长度必须是8bit。我们知道I2C通信一种总线通信，一个总线上可能会挂有许多部从机，但每一个从机都不一定是同样功能的，我们希望一个主机调遣目标从机时不会对其他的从机产生影响，因此，主机在发起通信后，必须先发送地址位进行寻址，只有地址与主机输出相符的从机才会有响应，这个地址位一般是占用7bit。另外，主机还需要告诉从机自己是想对它进行读还是写的操作，因此还要再加多1bit存放该信息，其中”写”代表”0”，”读”代表”1”。这样一来，主机发送的第一字在发送完8位数据之后，就确定了应答的从机是哪一个、以及它的工作模式。 当完成一个字节的发送之后，需要有一个来自从机的响应告诉主机已经收到了信息。因为即使主机联系了从机要他去干活，但没准别人正在忙别的没看微信，也不知道你发了消息过来，如果从机没有收到主机的报文，那么后面主机的数据发送将毫无意义。因此，从机响应是必须的。具体的方法是，当8位数据传输完以后，主机继续控制SCL线，但释放SDA线（也就是用上拉输入置于高电平），SDA线的控制权交给从机，这时从机如果收到了信号，便会把SDA线拉低。SCL置高时，主机发现SDA变低电平了，就能够得知从机已经收到了数据，于是就可以继续发送下一个字节的信息了。如果从机没有响应，那主机只好重新发起通信。 代码实现​ 接着我们看如何在TI的MSP432上实现I2C通信。(以下图片摘自TI官网,代码来自官方例程,我添了点注释) ​ 电气连接 1.主机的P1.6(SDA0)连接从机的P1.6(SDA0) 2.主机的P1.7(SCL0)连接从机的P1.7(SCL0) 3.主机与从机共地 至于图中所画的上拉电阻,我已经在开头讲过,可以不接，MSP432的其他IIC引脚可自行查看官方手册。 主机代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164/******************************************************************************* MSP432 I2C - EUSCI_B0_BASE主机发送多个数据到从机 描述: 两个MSP432通过IIC总线进行连接。主机发送数据到从机。 该例程是主机部分的代码。 IIC主机采用中断的方式连续发送数据。 ACLK = n/a, MCLK = HSMCLK = SMCLK = BRCLK = default DCO = ~3.0MHz ******************************************************************************///库函数头文件包含 #include &lt;ti/devices/msp432p4xx/driverlib/driverlib.h&gt;//标准头文件 #include &lt;stdint.h&gt; #include &lt;stdbool.h&gt;//从机地址定义 #define SLAVE_ADDRESS 0x48 //变量定义static uint8_t TXData = 0;static uint8_t TXByteCtr;//主机的IIC参数配置，速率选择(100KBPS, 400KBPS)const eUSCI_I2C_MasterConfig i2cConfig =&#123; EUSCI_B_I2C_CLOCKSOURCE_SMCLK, // 选择时钟源SMCLK 3000000, // SMCLK的频率是3MHz (默认) EUSCI_B_I2C_SET_DATA_RATE_400KBPS, // 设置I2C时钟速率为400khz 0, // 不使用字节计数阈值 EUSCI_B_I2C_NO_AUTO_STOP // 不自动产生STOP&#125;;int main(void)&#123; volatile uint32_t ii; //停用看门狗 MAP_WDT_A_holdTimer(); //P1.0用作运行指示灯 MAP_GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0); MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0); //选择P1.6和P1.7用作功能引脚，IIC接口. MAP_GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P1,​ GPIO_PIN6 + GPIO_PIN7, GPIO_PRIMARY_MODULE_FUNCTION); //IIC配置成主机,具体参数在i2cConfig中定义 MAP_I2C_initMaster(EUSCI_B0_BASE, &amp;i2cConfig); //配置从机通讯地址 MAP_I2C_setSlaveAddress(EUSCI_B0_BASE, SLAVE_ADDRESS); //配置主机处于发送模式 MAP_I2C_setMode(EUSCI_B0_BASE, EUSCI_B_I2C_TRANSMIT_MODE); //使能I2C模块 MAP_I2C_enableModule(EUSCI_B0_BASE); //清除中断标志，使能中断 MAP_I2C_clearInterruptFlag(EUSCI_B0_BASE,EUSCI_B_I2C_TRANSMIT_INTERRUPT0 + EUSCI_B_I2C_NAK_INTERRUPT); MAP_I2C_enableInterrupt(EUSCI_B0_BASE,EUSCI_B_I2C_TRANSMIT_INTERRUPT0 + EUSCI_B_I2C_NAK_INTERRUPT); MAP_Interrupt_enableInterrupt(INT_EUSCIB0); //开启全局中断 MAP_Interrupt_enableMaster(); while (1) &#123;​ //两次发送之间的延时等待​ for (ii = 0; ii &lt; 40000; ii++);​ for (ii = 0; ii &lt; 40000; ii++);​ //程序运行指示灯​ MAP_GPIO_toggleOutputOnPin(GPIO_PORT_P1, GPIO_PIN0);​ //字节计数​ TXByteCtr = 4;​ TXData = 0;​ //确保上一次的发送数据已经完成​ while (MAP_I2C_masterIsStopSent(EUSCI_B0_BASE) == EUSCI_B_I2C_SENDING_STOP);//主机发送起始条件START+地址​ //--如果从机发送应答ACK,UCTXSTT=0,UCTXIFG=1​ //--如果从机发送无应答NACK,UCTXSTT=0,UCNACKIFG=1​ MAP_I2C_masterSendStart(EUSCI_B0_BASE);// MAP_Interrupt_enableSleepOnIsrExit();// MAP_PCM_gotoLPM0InterruptSafe(); &#125;&#125;/******************************************************************************* \\* USCIAB0TX_ISR中断服务程序 * \\* TXByteCtr用来表示发送的数据数量; \\* TXData表示要发送的数据 ******************************************************************************/void EUSCIB0_IRQHandler(void)&#123; uint_fas**_t status; status = MAP_I2C_getEnabledInterruptStatus(EUSCI_B0_BASE); MAP_I2C_clearInterruptFlag(EUSCI_B0_BASE, status); //如果收到从机的无应答NACK,UCNACKIFG=1 if (status &amp; EUSCI_B_I2C_NAK_INTERRUPT) &#123;​ //主机发送起始信号START​ MAP_I2C_masterSendStart(EUSCI_B0_BASE); &#125; //如果收到从机的应答ACK,UCTXIFG=1 if (status &amp; EUSCI_B_I2C_TRANSMIT_INTERRUPT0) &#123;​ //判断发送的字节计数​ //TXByteCtr:(4),3,2,1​ //TXData :(0),1,2,3​ if (TXByteCtr)​ &#123;​ //发送下一个数据,并且计数减一​ MAP_I2C_masterSendMultiByteNext(EUSCI_B0_BASE, TXData++);​ TXByteCtr--;​ &#125;​ else​ &#123;​ //发送停止信号STOP​ MAP_I2C_masterSendMultiByteStop(EUSCI_B0_BASE);// MAP_Interrupt_disableSleepOnIsrExit();​ &#125; &#125;&#125; 从机代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146/******************************************************************************* \\* MSP432 I2C - EUSCI_B0_BASE从机接收主机发送的多个数据 * \\* 描述: \\* 两个MSP432通过IIC总线进行连接。主机发送数据到从机。 * \\* 该例程是从机部分的代码。 \\* 利用中断USCI_B0 RX接收数据;数据存储在数组RXData中; * * ******************************************************************************///库函数头文件包含 #include &lt;ti/devices/msp432p4xx/driverlib/driverlib.h&gt;//标准头文件#include &lt;stdint.h&gt;#include &lt;stdbool.h&gt;//例程相关的定义#define SLAVE_ADDRESS 0x48#define NUM_OF_RX_BYTES 4//变量定义static volatile uint8_t RXData[NUM_OF_RX_BYTES];static volatile uint32_t xferIndex;int main(void)&#123; //停用看门狗 MAP_WDT_A_holdTimer(); xferIndex = 0; //P1.0正确接收预期数据的指示灯 MAP_GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0); MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0); //P2.1接收的数据不符合预期的指示灯 MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN1); MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1); //选择P1.6和P1.7用作功能引脚，IIC接口 MAP_GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P1,​ GPIO_PIN6 + GPIO_PIN7, GPIO_PRIMARY_MODULE_FUNCTION); //eUSCI I2C从机配置 MAP_I2C_initSlave(EUSCI_B0_BASE, SLAVE_ADDRESS, EUSCI_B_I2C_OWN_ADDRESS_OFFSET0,​ EUSCI_B_I2C_OWN_ADDRESS_ENABLE); //I2C从机设置成接收模式 MAP_I2C_setMode(EUSCI_B0_BASE, EUSCI_B_I2C_RECEIVE_MODE); //使能eUSCI模块 MAP_I2C_enableModule(EUSCI_B0_BASE); //清除中断标志位,使能接收中断,使能模块中断 MAP_I2C_clearInterruptFlag(EUSCI_B0_BASE, EUSCI_B_I2C_RECEIVE_INTERRUPT0); MAP_I2C_enableInterrupt(EUSCI_B0_BASE, EUSCI_B_I2C_RECEIVE_INTERRUPT0); MAP_Interrupt_enableSleepOnIsrExit(); MAP_Interrupt_enableInterrupt(INT_EUSCIB0); //开启全局中断 MAP_Interrupt_enableMaster();//进入低功耗模式 while (1) &#123;​ MAP_PCM_gotoLPM0(); &#125;&#125;/****************************************************************************** \\* eUSCI_B0中断处理函数 \\* 处理iic模块接收到的数据，存放到数组中 ******************************************************************************/void EUSCIB0_IRQHandler(void)&#123; uint_fas**_t status; status = MAP_I2C_getEnabledInterruptStatus(EUSCI_B0_BASE); MAP_I2C_clearInterruptFlag(EUSCI_B0_BASE, status); //判断接收中断标志RXIFG //RXBUF收到数据时,RXIFG会自动置1 if (status &amp; EUSCI_B_I2C_RECEIVE_INTERRUPT0) &#123;​ //读取RXBUF当中的数据​ RXData[xferIndex] = MAP_I2C_slaveGetData(EUSCI_B0_BASE);​ //数组下标+1​ xferIndex++;​ //判断数组下标,如果已经是最大值,清零;​ //例如NUM_OF_RX_BYTES=4, xferIndex的取值为0,1,2,3​ if (xferIndex == NUM_OF_RX_BYTES)​ &#123;​ xferIndex = 0;//此处设置断点​ //对接收到的数据进行判断,看下是否符合预期​ if((RXData[0]==0x00)&amp;&amp;(RXData[1]==0x01)&amp;&amp;(RXData[2]==0x02)&amp;&amp;(RXData[3]==0x03))​ &#123;​ //正确接收到预期的数据,红灯闪烁​ MAP_GPIO_toggleOutputOnPin(GPIO_PORT_P1, GPIO_PIN0);​ &#125;​ else​ &#123;​ //接收的数据不符合预期,绿灯闪烁​ MAP_GPIO_toggleOutputOnPin(GPIO_PORT_P2, GPIO_PIN1);​ &#125;​ &#125; &#125;&#125;","categories":[],"tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://egdondeblog.xyz/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"通信原理","slug":"通信原理","permalink":"http://egdondeblog.xyz/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"},{"name":"数电","slug":"数电","permalink":"http://egdondeblog.xyz/tags/%E6%95%B0%E7%94%B5/"},{"name":"MSP432","slug":"MSP432","permalink":"http://egdondeblog.xyz/tags/MSP432/"}]},{"title":"个人博客搭建记录-概念篇","slug":"个人博客搭建记录-概念篇","date":"2021-08-10T08:19:37.000Z","updated":"2021-08-15T14:12:54.419Z","comments":true,"path":"2021/08/10/个人博客搭建记录-概念篇/","link":"","permalink":"http://egdondeblog.xyz/2021/08/10/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95-%E6%A6%82%E5%BF%B5%E7%AF%87/","excerpt":"","text":"1 前言​ 一直想找个聚合平台,既能记录我每次的开发日志,学习笔记,还能满足简单的娱乐需求,放点歌单、影单、小游戏啥的。当然,现在市面上的大部分app都能满足我的需求,但把数据放在别人的平台上总有一种我的笔记不属于我自己的感觉,所以这样一个个人博客就应运而生了。截止今天,博客的各项功能已经完成的差不多了,就趁热打铁,记录一下搭建博客过程中碰到的概念、开发时遇到的问题、使用过的工具以及对应的指令。 ​ 本篇根据搭建博客的顺序,记录这之中遇到的一些概念和问题,主要用于个人回顾,可能没有太大参考价值。 2 域名​ 搭建个人博客,让别人访问你的网站,首先你得有个域名。关于域名,wiki上的解释是: 域名系统（英语：Domain Name System，缩写:DNS）是互联网互联网)的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。 ​ 简单点说,IP地址全是数字记起来很麻烦,那就用熟悉的英文单词进行替代,但电脑路由器不认识域名,只认得IP啊，要怎么去获得对应的IP呢，这时候有了域名解析,去请求网络上的DNS服务器，让他们来告诉你这个域名对应的IP是多少。在国内,域名的购买几乎没有门槛。个人用户在阿里云购买域名只需要实名,而且价格还巨便宜(9元/年) ​ 关于域名的购买与设置,可以参考这篇文章。​ 个人博客第四篇——购买域名 ​ 域名的购买与设置这块我没遇到啥问题,买就vans了,其他的供应商都给你办的妥妥的。 3 域名解析​ 好的,域名我们有了,接下来就该把域名解析到我们的网站服务器上。刚刚提到,域名就是一个代号或者说方向标,它得指向你的网站内容。国内的域名解析服务商有很多,比较靠谱的还是”BAT”三巨头,以我使用的腾讯云为例。 ​ 看域名解析界面的记录类型,分别有CNAME、A、TXT，这里就着重整理一下CNAME记录和A记录。 （原理参考CNAME 别名记录） 3.1 A记录即Address记录，它不是一个IP或者一个域名，而是一种指向关系 1域名 www.egdondeblog.com → 1.1.1.1 也就是当你访问这些域名的时候，DNS服务器上会通过A记录会帮你解析出相应的IP地址，以达到后续的访问 3.2 CNAME Canonical Name ，别名记录，相当于给A记录中的域名起个小名，比如www.egdondeblog.com的小名就叫www.egdon.com好了，然后CNAME记录也和A记录一样，是一种指向关系，把小名儿www.egdon.com指向了www.egdondeblog.com，然后通过A记录，www.egdondeblog.com又指向了对应的IP： 1www.egdon.com → www.egdondeblog.com → 1.1.1.1 ​ 这样一来就能通过它的小名直接访问1.1.1.1了。 这时候有人问：这不多了一步嘛，不嫌麻烦？ 假设这个时候我又想给原域名取几个小名,分别叫www.xx.com和www.yy.com那么存在下列指向关系： 12345www.egdon.com → www.egdondeblog.com → 1.1.1.1www.xx.com → www.egdondeblog.com → 1.1.1.1www.yy.com → www.egdondeblog.com → 1.1.1.1 突然服务器的IP地址因为一些不可描述的原因要换了，不再是1.1.1.1了，换成了2.2.2.2，这时候发现，只要把www.egdondeblog.com的指向修改一下即可： 1www.egdondeblog.com → 2.2.2.2 这时候又会发现，原来他的小名不需要做更改，直接就能访问服务器，因为他们都只指向了www.egdondeblog.com，服务器IP改没改它们不管。 如果不用CNAME,直接做A记录就会出现以下情况 1234www.egdon.com → 1.1.1.1www.egdondeblog.com → 1.1.1.1www.xx.com → 1.1.1.1www.yy.com → 1.1.1.1 发没发现,这样其实更加麻烦。 除此之外,A记录和CNAME记录还有其他的不同点,但我搭建博客的过程中没遇到,这里也就不过多介绍。 4 CDN加速 现在域名有了,也可以解析到你的网站资源了,是时候给你的博客加加速了。国内的CDN加速门槛相比域名申请高的多,需要网站备案。而且网站备案也很麻烦,需要你手写保证书,还得拍一段申请人朗读保证书的视频,管局审批至少要等10天左右。但为了网站在国内的访问速度,该折腾还是得折腾的。。。 ​ 行,不多哔哔,回到正题。关于CDN(Content Delivery Network 内容分发网络)，原理过于复杂,我也就了解它会把网站内容预先分发至全国各地的加速节点。这样用户就可以就近获取所需内容,避免网络拥堵、地域、运营商等因素带来的访问延迟问题，有效提升下载速度、降低响应时间，提供流畅的用户体验。(为啥这么官方,因为摘自百度百科),关于CDN加速,这里有一篇文章写的很好,讲的通俗易懂。 漫话：如何给女朋友解释什么是CDN？ 总结:写到这就差不多了,其实还有一些零零碎碎的东西，比如不带WWW的域名级别一定是一级域名,带WWW的域名的域名级别可以是一级域名，也可以是二级域名啥的。也就不过多介绍,今天就摸啦摸啦。","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://egdondeblog.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"WEB","slug":"WEB","permalink":"http://egdondeblog.xyz/tags/WEB/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-30T14:51:19.000Z","updated":"2021-08-15T13:27:09.651Z","comments":true,"path":"2021/07/30/hello-world/","link":"","permalink":"http://egdondeblog.xyz/2021/07/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://egdondeblog.xyz/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"通信原理","slug":"通信原理","permalink":"http://egdondeblog.xyz/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"},{"name":"数电","slug":"数电","permalink":"http://egdondeblog.xyz/tags/%E6%95%B0%E7%94%B5/"},{"name":"MSP432","slug":"MSP432","permalink":"http://egdondeblog.xyz/tags/MSP432/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://egdondeblog.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"WEB","slug":"WEB","permalink":"http://egdondeblog.xyz/tags/WEB/"}]}